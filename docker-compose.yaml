################################################################################
# Node-RED Stack or Compose
################################################################################
# docker stack deploy node-red --compose-file docker-compose-node-red.yml
# docker-compose -f docker-compose-node-red.yml -p myNoderedProject up
################################################################################
version: "3.7"

services:
  db:
    image: postgres
    restart: always
    container_name: db
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - 5432:5432
    volumes:
      - ./db-data:/var/lib/postgresql/data
    networks:
      - traefik_proxy

  node-red:
    # build: .
    image: amaralbruno/gregory:latest
    restart: always
    container_name: node-red 
    environment:
      - TZ=Europe/Lisbon
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - DB_HOST=${DB_HOST}

    ports:
      - "1880:1880"
    networks:
      - traefik_proxy
    volumes:
      - flows:/data
      - python:/python-ml
    # The labels below are used to configure Traefik. Traefik is a reverse proxy and more information can be found here: https://traefik.io/
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nodered.tls=true"
      - "traefik.http.routers.nodered.tls.certResolver=default"
      - "traefik.http.services.nodered.loadbalancer.server.port=1880"
      - "traefik.http.routers.nodered.rule=Host(`${DOMAIN_NAME}`)&&PathPrefix(`/nodered/`)"
      # - "traefik.http.routers.nodered.rule=Host(`gregory.${DOMAIN_NAME}`)"
  admin:
    container_name: admin
    restart: always
    build: 
      context: django/
      dockerfile: Dockerfile
    # command: python manage.py runserver 0.0.0.0:8000
    command: gunicorn -b 0.0.0.0:8000 admin.wsgi
    volumes:
      - ./django:/code
      - python:/python-ml
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - DB_HOST=${DB_HOST}
      - SECRET_KEY=${SECRET_KEY}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - EMAIL_DOMAIN=${EMAIL_DOMAIN}
      - EMAIL_MAILGUN_API_URL=${EMAIL_MAILGUN_API_URL}
      - EMAIL_MAILGUN_API=${EMAIL_MAILGUN_API}

    networks:
      - traefik_proxy
    depends_on:
      - db
  metabase:
    container_name: metabase
    volumes:
      - ./metabase-data:/metabase-data
    environment:
      - MB_DB_TYPE=postgres
      - MB_DB_DBNAME=metabase
      - MB_DB_PORT=5432
      - MB_DB_USER=${POSTGRES_USER}
      - MB_DB_PASS=${POSTGRES_PASSWORD}
      - MB_DB_HOST=${DB_HOST}
    ports:
      - 3000:3000
    image: metabase/metabase
    # image: gregory/metabase
    restart: always
    # depends_on:
    #   - db
    networks:
      - traefik_proxy
volumes:
  flows:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '${GREGORY_DIR}docker-data'
  python:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '${GREGORY_DIR}python-ml'

networks:
  traefik_proxy:
    external: false
    name: traefik_proxy
  default:
    driver: bridge
