# Generated by Django 5.2 on 2025-05-18 23:51

import django.contrib.postgres.fields
import django.db.models.deletion
import django.db.models.functions.text
import django_countries.fields
import gregory.models
import simple_history.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('organizations', '0006_alter_organization_slug'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Authors',
            fields=[
                ('author_id', models.AutoField(primary_key=True, serialize=False)),
                ('family_name', models.CharField(max_length=150)),
                ('given_name', models.CharField(max_length=150)),
                ('ORCID', models.CharField(blank=True, max_length=150, null=True, unique=True)),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2, null=True)),
                ('orcid_check', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'authors',
                'db_table': 'authors',
            },
        ),
        migrations.CreateModel(
            name='Entities',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entity', models.TextField()),
                ('label', models.TextField()),
            ],
            options={
                'verbose_name_plural': 'entities',
                'db_table': 'entities',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Sources',
            fields=[
                ('active', models.BooleanField(default=True)),
                ('source_id', models.AutoField(primary_key=True, serialize=False)),
                ('source_for', models.CharField(choices=[('science paper', 'Science Paper'), ('trials', 'Trials'), ('news article', 'News Article')], default='science paper', max_length=50)),
                ('name', models.TextField(blank=True, null=True)),
                ('link', models.TextField(blank=True, null=True)),
                ('language', models.TextField(blank=True, null=True)),
                ('method', models.CharField(choices=[('rss', 'RSS'), ('scrape', 'Scrape'), ('manual', 'Manual submission')], default='rss', max_length=10)),
                ('ignore_ssl', models.BooleanField(default=False)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'sources',
                'db_table': 'sources',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject_name', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
                ('subject_slug', models.SlugField()),
            ],
            options={
                'verbose_name_plural': 'subjects',
                'db_table': 'subjects',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TeamMember',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('organizations.organizationuser',),
        ),
        migrations.CreateModel(
            name='Articles',
            fields=[
                ('article_id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.TextField(unique=True)),
                ('link', models.URLField(max_length=2000)),
                ('doi', models.CharField(blank=True, max_length=280, null=True)),
                ('summary', models.TextField(blank=True, null=True)),
                ('summary_plain_english', models.TextField(blank=True, null=True)),
                ('published_date', models.DateTimeField(blank=True, null=True)),
                ('discovery_date', models.DateTimeField(auto_now_add=True)),
                ('relevant', models.BooleanField(blank=True, null=True)),
                ('noun_phrases', models.JSONField(blank=True, null=True)),
                ('sent_to_subscribers', models.BooleanField(blank=True, null=True)),
                ('kind', models.CharField(choices=[('science paper', 'Science Paper'), ('news article', 'News Article')], default='science paper', max_length=50)),
                ('access', models.CharField(choices=[('unknown', 'Unknown'), ('open', 'Open'), ('restricted', 'Restricted')], default=None, max_length=50, null=True)),
                ('publisher', models.CharField(blank=True, default=None, max_length=150, null=True)),
                ('container_title', models.CharField(blank=True, default=None, max_length=150, null=True)),
                ('crossref_check', models.DateTimeField(blank=True, null=True)),
                ('takeaways', models.TextField(blank=True, null=True)),
                ('retracted', models.BooleanField(default=False)),
                ('authors', models.ManyToManyField(blank=True, to='gregory.authors')),
                ('entities', models.ManyToManyField(to='gregory.entities')),
            ],
            options={
                'verbose_name_plural': 'articles',
                'db_table': 'articles',
                'ordering': ['-discovery_date'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='HistoricalArticles',
            fields=[
                ('article_id', models.IntegerField(blank=True, db_index=True)),
                ('title', models.TextField(db_index=True)),
                ('link', models.URLField(max_length=2000)),
                ('doi', models.CharField(blank=True, max_length=280, null=True)),
                ('summary', models.TextField(blank=True, null=True)),
                ('summary_plain_english', models.TextField(blank=True, null=True)),
                ('published_date', models.DateTimeField(blank=True, null=True)),
                ('discovery_date', models.DateTimeField(blank=True, editable=False)),
                ('relevant', models.BooleanField(blank=True, null=True)),
                ('noun_phrases', models.JSONField(blank=True, null=True)),
                ('sent_to_subscribers', models.BooleanField(blank=True, null=True)),
                ('kind', models.CharField(choices=[('science paper', 'Science Paper'), ('news article', 'News Article')], default='science paper', max_length=50)),
                ('access', models.CharField(choices=[('unknown', 'Unknown'), ('open', 'Open'), ('restricted', 'Restricted')], default=None, max_length=50, null=True)),
                ('publisher', models.CharField(blank=True, default=None, max_length=150, null=True)),
                ('container_title', models.CharField(blank=True, default=None, max_length=150, null=True)),
                ('crossref_check', models.DateTimeField(blank=True, null=True)),
                ('takeaways', models.TextField(blank=True, null=True)),
                ('retracted', models.BooleanField(default=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical articles',
                'verbose_name_plural': 'historical articles',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAuthors',
            fields=[
                ('author_id', models.IntegerField(blank=True, db_index=True)),
                ('family_name', models.CharField(max_length=150)),
                ('given_name', models.CharField(max_length=150)),
                ('ORCID', models.CharField(blank=True, db_index=True, max_length=150, null=True)),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2, null=True)),
                ('orcid_check', models.DateTimeField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical authors',
                'verbose_name_plural': 'historical authors',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTrials',
            fields=[
                ('trial_id', models.IntegerField(blank=True, db_index=True)),
                ('discovery_date', models.DateTimeField(blank=True, null=True)),
                ('last_updated', models.DateTimeField(blank=True, editable=False, null=True)),
                ('title', models.TextField(db_index=True)),
                ('summary', models.TextField(blank=True, null=True)),
                ('summary_plain_english', models.TextField(blank=True, null=True)),
                ('link', models.URLField(max_length=2000)),
                ('published_date', models.DateTimeField(blank=True, null=True)),
                ('relevant', models.BooleanField(blank=True, null=True)),
                ('identifiers', models.JSONField(blank=True, null=True)),
                ('export_date', models.DateTimeField(blank=True, null=True)),
                ('internal_number', models.CharField(blank=True, max_length=100, null=True)),
                ('last_refreshed_on', models.DateField(blank=True, null=True)),
                ('scientific_title', models.TextField(blank=True, null=True)),
                ('primary_sponsor', models.TextField(blank=True, null=True)),
                ('retrospective_flag', models.CharField(blank=True, max_length=10, null=True)),
                ('date_registration', models.DateField(blank=True, null=True)),
                ('source_register', models.CharField(blank=True, max_length=200, null=True)),
                ('recruitment_status', models.CharField(blank=True, max_length=200, null=True)),
                ('inclusion_agemin', models.CharField(blank=True, max_length=100, null=True)),
                ('inclusion_agemax', models.CharField(blank=True, max_length=100, null=True)),
                ('inclusion_gender', models.CharField(blank=True, max_length=500, null=True)),
                ('date_enrollement', models.DateField(blank=True, null=True)),
                ('target_size', models.TextField(blank=True, null=True)),
                ('study_type', models.TextField(blank=True, null=True)),
                ('study_design', models.TextField(blank=True, null=True)),
                ('phase', models.TextField(blank=True, null=True)),
                ('countries', models.TextField(blank=True, null=True)),
                ('contact_firstname', models.TextField(blank=True, null=True)),
                ('contact_lastname', models.TextField(blank=True, null=True)),
                ('contact_address', models.TextField(blank=True, null=True)),
                ('contact_email', models.EmailField(blank=True, max_length=2000, null=True)),
                ('contact_tel', models.TextField(blank=True, null=True)),
                ('contact_affiliation', models.TextField(blank=True, null=True)),
                ('inclusion_criteria', models.TextField(blank=True, null=True)),
                ('exclusion_criteria', models.TextField(blank=True, null=True)),
                ('condition', models.TextField(blank=True, null=True)),
                ('intervention', models.TextField(blank=True, null=True)),
                ('primary_outcome', models.TextField(blank=True, null=True)),
                ('secondary_outcome', models.TextField(blank=True, null=True)),
                ('secondary_id', models.TextField(blank=True, null=True)),
                ('source_support', models.TextField(blank=True, null=True)),
                ('ethics_review_status', models.TextField(blank=True, null=True)),
                ('ethics_review_approval_date', models.DateField(blank=True, null=True)),
                ('ethics_review_contact_name', models.EmailField(blank=True, max_length=1000, null=True)),
                ('ethics_review_contact_address', models.TextField(blank=True, null=True)),
                ('ethics_review_contact_phone', models.TextField(blank=True, null=True)),
                ('ethics_review_contact_email', models.EmailField(blank=True, max_length=1000, null=True)),
                ('results_date_completed', models.DateField(blank=True, null=True)),
                ('results_url_link', models.URLField(blank=True, max_length=2000, null=True)),
                ('therapeutic_areas', models.TextField(blank=True, null=True)),
                ('country_status', models.TextField(blank=True, null=True)),
                ('trial_region', models.CharField(blank=True, max_length=500, null=True)),
                ('results_posted', models.BooleanField(default=False)),
                ('overall_decision_date', models.DateField(blank=True, null=True)),
                ('countries_decision_date', models.JSONField(blank=True, null=True)),
                ('sponsor_type', models.CharField(blank=True, max_length=500, null=True)),
                ('other_records', models.CharField(blank=True, max_length=200, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical trials',
                'verbose_name_plural': 'historical trials',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='MLPredictions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('model_version', models.CharField(blank=True, help_text='Version identifier of the ML model used', max_length=100, null=True)),
                ('probability_score', models.FloatField(blank=True, help_text='Probability score from the ML model prediction', null=True)),
                ('predicted_relevant', models.BooleanField(blank=True, help_text='Whether the ML model predicted this article as relevant', null=True)),
                ('gnb', models.BooleanField(blank=True, help_text='Indicates the Machine Learning prediction made using Gaussian Naive Bayes.', null=True, verbose_name='Gaussian Naive Bayes Prediction')),
                ('lr', models.BooleanField(blank=True, help_text='Indicates the Machine Learning prediction made using Logistic Regression.', null=True, verbose_name='Logistic Regression Prediction')),
                ('lsvc', models.BooleanField(blank=True, help_text='Indicates the Machine Learning prediction made using Linear Support Vector Classification.', null=True, verbose_name='Linear Support Vector Classification Prediction')),
                ('mnb', models.BooleanField(blank=True, help_text='indicates the Machine Learning prediction using Multinomial Naive Bayes.', null=True, verbose_name='Multinomial Naive Bayes')),
                ('article', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ml_predictions_detail', to='gregory.articles')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ml_subject_predictions', to='gregory.subject')),
            ],
            options={
                'unique_together': {('article', 'subject', 'model_version')},
            },
        ),
        migrations.AddField(
            model_name='articles',
            name='ml_predictions',
            field=models.ManyToManyField(blank=True, to='gregory.mlpredictions'),
        ),
        migrations.AddField(
            model_name='articles',
            name='sources',
            field=models.ManyToManyField(blank=True, to='gregory.sources'),
        ),
        migrations.AddField(
            model_name='sources',
            name='subject',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='gregory.subject'),
        ),
        migrations.AddField(
            model_name='articles',
            name='subjects',
            field=models.ManyToManyField(related_name='articles', to='gregory.subject'),
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(unique=True)),
                ('organization', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='team', to='organizations.organization')),
            ],
        ),
        migrations.AddField(
            model_name='subject',
            name='team',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subjects', to='gregory.team'),
        ),
        migrations.AddField(
            model_name='sources',
            name='team',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sources', to='gregory.team'),
        ),
        migrations.AddField(
            model_name='articles',
            name='teams',
            field=models.ManyToManyField(related_name='articles', to='gregory.team'),
        ),
        migrations.CreateModel(
            name='TeamCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_name', models.CharField(max_length=200)),
                ('category_description', models.TextField(blank=True, null=True)),
                ('category_slug', models.SlugField(blank=True, null=True, unique=True)),
                ('category_terms', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), default=list, help_text='Add terms separated by commas.', size=None, verbose_name='Terms to include in category (comma separated)')),
                ('subjects', models.ManyToManyField(related_name='team_subjects', to='gregory.subject')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_categories', to='gregory.team')),
            ],
            options={
                'verbose_name_plural': 'team categories',
                'db_table': 'team_categories',
                'unique_together': {('team', 'category_slug')},
            },
        ),
        migrations.AddField(
            model_name='articles',
            name='team_categories',
            field=models.ManyToManyField(blank=True, related_name='articles', to='gregory.teamcategory'),
        ),
        migrations.CreateModel(
            name='TeamCredentials',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('postmark_api_token', gregory.models.EncryptedTextField(blank=True, help_text='Postmark API Token for this team.', null=True)),
                ('postmark_api_url', models.URLField(blank=True, help_text='Postmark API URL for this team.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('team', models.OneToOneField(help_text='The team associated with these credentials.', on_delete=django.db.models.deletion.CASCADE, related_name='credentials', to='gregory.team')),
            ],
            options={
                'verbose_name': 'Team Credential',
                'verbose_name_plural': 'Team Credentials',
            },
        ),
        migrations.CreateModel(
            name='ArticleSubjectRelevance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_relevant', models.BooleanField(default=False, help_text='Indicates if the article is relevant for the subject.')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='article_subject_relevances', to='gregory.articles')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gregory.subject')),
            ],
            options={
                'verbose_name_plural': 'article subject relevances',
                'unique_together': {('article', 'subject')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='subject',
            unique_together={('team', 'subject_slug')},
        ),
        migrations.CreateModel(
            name='PredictionRunLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_version', models.CharField(help_text='Version identifier for the model used', max_length=100)),
                ('run_type', models.CharField(choices=[('train', 'Training'), ('predict', 'Prediction')], help_text='Type of run: training or prediction', max_length=10)),
                ('run_started', models.DateTimeField(auto_now_add=True, help_text='When the run was started')),
                ('run_finished', models.DateTimeField(blank=True, help_text='When the run was completed', null=True)),
                ('success', models.BooleanField(blank=True, help_text='Whether the run was successful', null=True)),
                ('triggered_by', models.CharField(blank=True, help_text='User or system that triggered the run', max_length=100, null=True)),
                ('error_message', models.TextField(blank=True, help_text='Error message if the run failed', null=True)),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prediction_run_logs', to='gregory.subject')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prediction_run_logs', to='gregory.team')),
            ],
            options={
                'verbose_name': 'Prediction Run Log',
                'verbose_name_plural': 'Prediction Run Logs',
                'indexes': [models.Index(fields=['team', 'subject', 'run_finished'], name='gregory_pre_team_id_6338d8_idx'), models.Index(fields=['run_type', 'success'], name='gregory_pre_run_typ_f366b5_idx')],
            },
        ),
        migrations.AlterUniqueTogether(
            name='articles',
            unique_together={('title', 'link')},
        ),
        migrations.CreateModel(
            name='Trials',
            fields=[
                ('trial_id', models.AutoField(primary_key=True, serialize=False)),
                ('discovery_date', models.DateTimeField(blank=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('title', models.TextField(unique=True)),
                ('summary', models.TextField(blank=True, null=True)),
                ('summary_plain_english', models.TextField(blank=True, null=True)),
                ('link', models.URLField(max_length=2000)),
                ('published_date', models.DateTimeField(blank=True, null=True)),
                ('relevant', models.BooleanField(blank=True, null=True)),
                ('identifiers', models.JSONField(blank=True, null=True)),
                ('export_date', models.DateTimeField(blank=True, null=True)),
                ('internal_number', models.CharField(blank=True, max_length=100, null=True)),
                ('last_refreshed_on', models.DateField(blank=True, null=True)),
                ('scientific_title', models.TextField(blank=True, null=True)),
                ('primary_sponsor', models.TextField(blank=True, null=True)),
                ('retrospective_flag', models.CharField(blank=True, max_length=10, null=True)),
                ('date_registration', models.DateField(blank=True, null=True)),
                ('source_register', models.CharField(blank=True, max_length=200, null=True)),
                ('recruitment_status', models.CharField(blank=True, max_length=200, null=True)),
                ('inclusion_agemin', models.CharField(blank=True, max_length=100, null=True)),
                ('inclusion_agemax', models.CharField(blank=True, max_length=100, null=True)),
                ('inclusion_gender', models.CharField(blank=True, max_length=500, null=True)),
                ('date_enrollement', models.DateField(blank=True, null=True)),
                ('target_size', models.TextField(blank=True, null=True)),
                ('study_type', models.TextField(blank=True, null=True)),
                ('study_design', models.TextField(blank=True, null=True)),
                ('phase', models.TextField(blank=True, null=True)),
                ('countries', models.TextField(blank=True, null=True)),
                ('contact_firstname', models.TextField(blank=True, null=True)),
                ('contact_lastname', models.TextField(blank=True, null=True)),
                ('contact_address', models.TextField(blank=True, null=True)),
                ('contact_email', models.EmailField(blank=True, max_length=2000, null=True)),
                ('contact_tel', models.TextField(blank=True, null=True)),
                ('contact_affiliation', models.TextField(blank=True, null=True)),
                ('inclusion_criteria', models.TextField(blank=True, null=True)),
                ('exclusion_criteria', models.TextField(blank=True, null=True)),
                ('condition', models.TextField(blank=True, null=True)),
                ('intervention', models.TextField(blank=True, null=True)),
                ('primary_outcome', models.TextField(blank=True, null=True)),
                ('secondary_outcome', models.TextField(blank=True, null=True)),
                ('secondary_id', models.TextField(blank=True, null=True)),
                ('source_support', models.TextField(blank=True, null=True)),
                ('ethics_review_status', models.TextField(blank=True, null=True)),
                ('ethics_review_approval_date', models.DateField(blank=True, null=True)),
                ('ethics_review_contact_name', models.EmailField(blank=True, max_length=1000, null=True)),
                ('ethics_review_contact_address', models.TextField(blank=True, null=True)),
                ('ethics_review_contact_phone', models.TextField(blank=True, null=True)),
                ('ethics_review_contact_email', models.EmailField(blank=True, max_length=1000, null=True)),
                ('results_date_completed', models.DateField(blank=True, null=True)),
                ('results_url_link', models.URLField(blank=True, max_length=2000, null=True)),
                ('therapeutic_areas', models.TextField(blank=True, null=True)),
                ('country_status', models.TextField(blank=True, null=True)),
                ('trial_region', models.CharField(blank=True, max_length=500, null=True)),
                ('results_posted', models.BooleanField(default=False)),
                ('overall_decision_date', models.DateField(blank=True, null=True)),
                ('countries_decision_date', models.JSONField(blank=True, null=True)),
                ('sponsor_type', models.CharField(blank=True, max_length=500, null=True)),
                ('other_records', models.CharField(blank=True, max_length=200, null=True)),
                ('ml_predictions', models.ManyToManyField(blank=True, to='gregory.mlpredictions')),
                ('sources', models.ManyToManyField(blank=True, to='gregory.sources')),
                ('subjects', models.ManyToManyField(related_name='trials', to='gregory.subject')),
                ('team_categories', models.ManyToManyField(related_name='trials', to='gregory.teamcategory')),
                ('teams', models.ManyToManyField(related_name='trials', to='gregory.team')),
            ],
            options={
                'verbose_name_plural': 'trials',
                'db_table': 'trials',
                'managed': True,
                'constraints': [models.UniqueConstraint(django.db.models.functions.text.Lower('title'), name='unique_title_case_insensitive')],
            },
        ),
    ]
