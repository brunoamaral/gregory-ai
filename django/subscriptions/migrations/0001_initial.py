# Generated by Django 5.2 on 2025-05-18 23:51

import django.db.models.deletion
import django.db.models.functions.text
import simple_history.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('gregory', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='HistoricalSubscribers',
            fields=[
                ('subscriber_id', models.IntegerField(blank=True, db_index=True)),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(blank=True, max_length=150, null=True)),
                ('email', models.EmailField(db_index=True, max_length=254)),
                ('profile', models.CharField(choices=[('patient', 'Patient'), ('doctor', 'Doctor'), ('clinical centre', 'Clinical Centre'), ('researcher', 'Researcher')], default='', max_length=50)),
                ('active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical subscribers',
                'verbose_name_plural': 'historical subscribers',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Lists',
            fields=[
                ('list_id', models.AutoField(primary_key=True, serialize=False)),
                ('list_name', models.CharField(max_length=150)),
                ('list_description', models.CharField(blank=True, max_length=150, null=True)),
                ('list_email_subject', models.CharField(blank=True, max_length=150, null=True)),
                ('admin_summary', models.BooleanField(default=False)),
                ('weekly_digest', models.BooleanField(default=False)),
                ('clinical_trials_notifications', models.BooleanField(default=False)),
                ('subjects', models.ManyToManyField(blank=True, to='gregory.subject')),
                ('team', models.ForeignKey(help_text='The team this list belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='lists', to='gregory.team')),
            ],
            options={
                'verbose_name_plural': 'lists',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Subscribers',
            fields=[
                ('subscriber_id', models.AutoField(primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(blank=True, max_length=150, null=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('profile', models.CharField(choices=[('patient', 'Patient'), ('doctor', 'Doctor'), ('clinical centre', 'Clinical Centre'), ('researcher', 'Researcher')], default='', max_length=50)),
                ('active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('subscriptions', models.ManyToManyField(blank=True, to='subscriptions.lists')),
            ],
            options={
                'verbose_name_plural': 'subscribers',
                'db_table': 'subscribers',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SentTrialNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='subscriptions.lists')),
                ('trial', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gregory.trials')),
                ('subscriber', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='subscriptions.subscribers')),
            ],
            options={
                'verbose_name_plural': 'sent trial notifications',
            },
        ),
        migrations.CreateModel(
            name='SentArticleNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gregory.articles')),
                ('list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='subscriptions.lists')),
                ('subscriber', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='subscriptions.subscribers')),
            ],
            options={
                'verbose_name_plural': 'sent article notifications',
            },
        ),
        migrations.CreateModel(
            name='HistoricalSubscribers_subscriptions',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('m2m_history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='subscriptions.historicalsubscribers')),
                ('lists', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='subscriptions.lists')),
                ('subscribers', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='subscriptions.subscribers')),
            ],
            options={
                'verbose_name': 'HistoricalSubscribers_subscriptions',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='FailedNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='subscriptions.lists')),
                ('subscriber', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='subscriptions.subscribers')),
            ],
            options={
                'verbose_name_plural': 'Failed Notifications',
            },
        ),
        migrations.AddConstraint(
            model_name='subscribers',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('email'), name='unique_lower_email'),
        ),
        migrations.AlterUniqueTogether(
            name='senttrialnotification',
            unique_together={('trial', 'list', 'subscriber')},
        ),
        migrations.AlterUniqueTogether(
            name='sentarticlenotification',
            unique_together={('article', 'list', 'subscriber')},
        ),
    ]
